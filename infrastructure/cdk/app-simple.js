#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleAiComplianceStack = void 0;
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
// Simple demo stack for hackathon
class SimpleAiComplianceStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Demonstrate CDK is working
        const lambda = new cdk.aws_lambda.Function(this, 'DemoLambda', {
            runtime: cdk.aws_lambda.Runtime.NODEJS_18_X,
            handler: 'index.handler',
            code: cdk.aws_lambda.Code.fromInline(`
        exports.handler = async (event) => {
          console.log('AI Compliance Shepherd Demo');
          return {
            statusCode: 200,
            body: JSON.stringify({
              message: 'AI Compliance Shepherd Platform Ready',
              timestamp: new Date().toISOString(),
              environment: 'demo'
            })
          };
        };
      `),
            description: 'AI Compliance Shepherd Demo Lambda Function'
        });
        // API Gateway for demo
        const api = new cdk.aws_apigateway.RestApi(this, 'DemoAPI', {
            restApiName: 'AI Compliance Shepherd Demo API',
            description: 'Demo API for AI Compliance Shepherd Platform',
            endpointConfiguration: {
                types: [cdk.aws_apigateway.EndpointType.REGIONAL]
            }
        });
        // Lambda integration
        const lambdaIntegration = new cdk.aws_apigateway.LambdaIntegration(lambda);
        // API endpoints
        api.root.addMethod('GET');
        api.root.addResource('health').addMethod('GET', lambdaIntegration);
        api.root.addResource('demo').addMethod('GET', lambdaIntegration);
        // DynamoDB table for demo
        const dynamoTable = new cdk.aws_dynamodb.Table(this, 'DemoTable', {
            tableName: 'ai-compliance-demo-findings',
            partitionKey: { name: 'id', type: cdk.aws_dynamodb.AttributeType.STRING },
            sortKey: { name: 'timestamp', type: cdk.aws_dynamodb.AttributeType.STRING },
            billingMode: cdk.aws_dynamodb.BillingMode.PAY_PER_REQUEST,
            removalPolicy: cdk.RemovalPolicy.DESTROY, // For demo purposes
            stream: cdk.aws_dynamodb.StreamViewType.NEW_AND_OLD_IMAGES
        });
        // S3 bucket for demo
        const s3Bucket = new cdk.aws_s3.Bucket(this, 'DemoBucket', {
            bucketName: `${props?.env?.account}-ai-compliance-demo-${Date.now()}`,
            removalPolicy: cdk.RemovalPolicy.DESTROY, // For demo purposes
            autoDeleteObjects: true, // For demo purposes
            blockPublicAccess: cdk.aws_s3.BlockPublicAccess.BLOCK_ALL,
            encryption: cdk.aws_s3.BucketEncryption.S3_MANAGED,
            versioned: true
        });
        // CloudWatch dashboard for demo
        const dashboard = new cdk.aws_cloudwatch.Dashboard(this, 'DemoDashboard', {
            dashboardName: 'AI-Compliance-Demo-Dashboard'
        });
        dashboard.addWidgets(new cdk.aws_cloudwatch.TextWidget({
            markdown: '# AI Compliance Shepherd Demo\n\nThis is a demonstration of the AI Compliance Shepherd platform architecture.'
        }));
        // Grant permissions
        lambda.addToRolePolicy(new cdk.aws_iam.PolicyStatement({
            actions: ['dynamodb:GetItem', 'dynamodb:PutItem', 'dynamodb:Query'],
            resources: [dynamoTable.tableArn]
        }));
        lambda.addToRolePolicy(new cdk.aws_iam.PolicyStatement({
            actions: ['s3:GetObject', 's3:PutObject'],
            resources: [`${s3Bucket.bucketArn}/*`]
        }));
        // Outputs
        new cdk.CfnOutput(this, 'ApiUrl', {
            value: api.url,
            description: 'Demo API URL'
        });
        new cdk.CfnOutput(this, 'LambdaArn', {
            value: lambda.functionArn,
            description: 'Demo Lambda Function ARN'
        });
        new cdk.CfnOutput(this, 'DynamoTableName', {
            value: dynamoTable.tableName,
            description: 'Demo DynamoDB Table Name'
        });
        new cdk.CfnOutput(this, 'S3BucketName', {
            value: s3Bucket.bucketName,
            description: 'Demo S3 Bucket Name'
        });
        // Tags
        cdk.Tags.of(this).add('Project', 'AI-Compliance-Shepherd');
        cdk.Tags.of(this).add('Environment', 'demo');
        cdk.Tags.of(this).add('Stage', 'demo');
        cdk.Tags.of(this).add('ManagedBy', 'CDK');
        cdk.Tags.of(this).add('Purpose', 'Hackathon Demo');
    }
}
exports.SimpleAiComplianceStack = SimpleAiComplianceStack;
// Simple app for demo
const app = new cdk.App();
const accountId = app.node.tryGetContext('accountId') || process.env.CDK_DEFAULT_ACCOUNT;
const region = app.node.tryGetContext('region') || process.env.CDK_DEFAULT_REGION || 'us-east-1';
new SimpleAiComplianceStack(app, 'AIComplianceDemoStack', {
    env: {
        account: accountId,
        region: region
    },
    description: 'AI Compliance Shepherd Demo Stack for Hackathon'
});
// Add tags to the entire app
cdk.Tags.of(app).add('Project', 'AI-Compliance-Shepherd');
cdk.Tags.of(app).add('Purpose', 'Hackathon Demo');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXNpbXBsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcC1zaW1wbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLHVDQUFxQztBQUNyQyxtQ0FBbUM7QUFHbkMsa0NBQWtDO0FBQ2xDLE1BQWEsdUJBQXdCLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDcEQsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUM5RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4Qiw2QkFBNkI7UUFDN0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFO1lBQzdELE9BQU8sRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQzNDLE9BQU8sRUFBRSxlQUFlO1lBQ3hCLElBQUksRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7Ozs7Ozs7Ozs7OztPQVlwQyxDQUFDO1lBQ0YsV0FBVyxFQUFFLDZDQUE2QztTQUMzRCxDQUFDLENBQUM7UUFFSCx1QkFBdUI7UUFDdkIsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFO1lBQzFELFdBQVcsRUFBRSxpQ0FBaUM7WUFDOUMsV0FBVyxFQUFFLDhDQUE4QztZQUMzRCxxQkFBcUIsRUFBRTtnQkFDckIsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO2FBQ2xEO1NBQ0YsQ0FBQyxDQUFDO1FBRUgscUJBQXFCO1FBQ3JCLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTNFLGdCQUFnQjtRQUNoQixHQUFHLENBQUMs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RTFCLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUM7QUFDekYsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxXQUFXLENBQUM7QUFFakcsSUFBSSx1QkFBdUIsQ0FBQyxHQUFHLEVBQUUsdUJBQXVCLEVBQUU7SUFDeEQsR0FBRyxFQUFFO1FBQ0gsT0FBTyxFQUFFLFNBQVM7UUFDbEIsTUFBTSxFQUFFLE1BQU07S0FDZjtJQUNELFdBQVcsRUFBRSxpREFBaUQ7Q0FDL0QsQ0FBQyxDQUFDO0FBRUgsNkJBQTZCO0FBQzdCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztBQUMxRCxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLGdCQUFnQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXHJcblxyXG5pbXBvcnQgJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3Rlcic7XHJcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XHJcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xyXG5cclxuLy8gU2ltcGxlIGRlbW8gc3RhY2sgZm9yIGhhY2thdGhvblxyXG5leHBvcnQgY2xhc3MgU2ltcGxlQWlDb21wbGlhbmNlU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xyXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcclxuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xyXG5cclxuICAgIC8vIERlbW9uc3RyYXRlIENESyBpcyB3b3JraW5nXHJcbiAgICBjb25zdCBsYW1iZGEgPSBuZXcgY2RrLmF3c19sYW1iZGEuRnVuY3Rpb24odGhpcywgJ0RlbW9MYW1iZGEnLCB7XHJcbiAgICAgIHJ1bnRpbWU6IGNkay5hd3NfbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE4X1gsXHJcbiAgICAgIGhhbmRsZXI6ICdpbmRleC5oYW5kbGVyJyxcclxuICAgICAgY29kZTogY2RrLmF3c19sYW1iZGEuQ29kZS5mcm9tSW5saW5lKGBcclxuICAgICAgICBleHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdBSSBDb21wbGlhbmNlIFNoZXBoZXJkIERlbW8nKTtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdBSSBDb21wbGlhbmNlIFNoZXBoZXJkIFBsYXRmb3JtIFJlYWR5JyxcclxuICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICAgICAgICBlbnZpcm9ubWVudDogJ2RlbW8nXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcbiAgICAgIGApLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0FJIENvbXBsaWFuY2UgU2hlcGhlcmQgRGVtbyBMYW1iZGEgRnVuY3Rpb24nXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBBUEkgR2F0ZXdheSBmb3IgZGVtb1xyXG4gICAgY29uc3QgYXBpID0gbmV3IGNkay5hd3NfYXBpZ2F0ZXdheS5SZXN0QXBpKHRoaXMsICdEZW1vQVBJJywge1xyXG4gICAgICByZXN0QXBpTmFtZTogJ0FJIENvbXBsaWFuY2UgU2hlcGhlcmQgRGVtbyBBUEknLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0RlbW8gQVBJIGZvciBBSSBDb21wbGlhbmNlIFNoZXBoZXJkIFBsYXRmb3JtJyxcclxuICAgICAgZW5kcG9pbnRDb25maWd1cmF0aW9uOiB7XHJcbiAgICAgICAgdHlwZXM6IFtjZGsuYXdzX2FwaWdhdGV3YXkuRW5kcG9pbnRUeXBlLlJFR0lPTkFMXVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBMYW1iZGEgaW50ZWdyYXRpb25cclxuICAgIGNvbnN0IGxhbWJkYUludGVncmF0aW9uID0gbmV3IGNkay5hd3NfYXBpZ2F0ZXdheS5MYW1iZGFJbnRlZ3JhdGlvbihsYW1iZGEpO1xyXG5cclxuICAgIC8vIEFQSSBlbmRwb2ludHNcclxuICAgIGFwaS5yb290LmFkZE1ldGhvZCgnR0VUJyk7XHJcbiAgICBhcGkucm9vdC5hZGRSZXNvdXJjZSgnaGVhbHRoJykuYWRkTWV0aG9kKCdHRVQnLCBsYW1iZGFJbnRlZ3JhdGlvbik7XHJcbiAgICBhcGkucm9vdC5hZGRSZXNvdXJjZSgnZGVtbycpLmFkZE1ldGhvZCgnR0VUJywgbGFtYmRhSW50ZWdyYXRpb24pO1xyXG5cclxuICAgIC8vIER5bmFtb0RCIHRhYmxlIGZvciBkZW1vXHJcbiAgICBjb25zdCBkeW5hbW9UYWJsZSA9IG5ldyBjZGsuYXdzX2R5bmFtb2RiLlRhYmxlKHRoaXMsICdEZW1vVGFibGUnLCB7XHJcbiAgICAgIHRhYmxlTmFtZTogJ2FpLWNvbXBsaWFuY2UtZGVtby1maW5kaW5ncycsXHJcbiAgICAgIHBhcnRpdGlvbktleTogeyBuYW1lOiAnaWQnLCB0eXBlOiBjZGsuYXdzX2R5bmFtb2RiLkF0dHJpYnV0ZVR5cGUuU1RSSU5HIH0sXHJcbiAgICAgIHNvcnRLZXk6IHsgbmFtZTogJ3RpbWVzdGFtcCcsIHR5cGU6IGNkay5hd3NfZHluYW1vZGIuQXR0cmlidXRlVHlwZS5TVFJJTkcgfSxcclxuICAgICAgYmlsbGluZ01vZGU6IGNkay5hd3NfZHluYW1vZGIuQmlsbGluZ01vZGUuUEFZX1BFUl9SRVFVRVNULFxyXG4gICAgICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLCAvLyBGb3IgZGVtbyBwdXJwb3Nlc1xyXG4gICAgICBzdHJlYW06IGNkay5hd3NfZHluYW1vZGIuU3RyZWFtVmlld1R5cGUuTkVXX0FORF9PTERfSU1BR0VTXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBTMyBidWNrZXQgZm9yIGRlbW9cclxuICAgIGNvbnN0IHMzQnVja2V0ID0gbmV3IGNkay5hd3NfczMuQnVja2V0KHRoaXMsICdEZW1vQnVja2V0Jywge1xyXG4gICAgICBidWNrZXROYW1lOiBgJHtwcm9wcz8uZW52Py5hY2NvdW50fS1haS1jb21wbGlhbmNlLWRlbW8tJHtEYXRlLm5vdygpfWAsXHJcbiAgICAgIHJlbW92YWxQb2xpY3k6IGNkay5SZW1vdmFsUG9saWN5LkRFU1RST1ksIC8vIEZvciBkZW1vIHB1cnBvc2VzXHJcbiAgICAgIGF1dG9EZWxldGVPYmplY3RzOiB0cnVlLCAvLyBGb3IgZGVtbyBwdXJwb3Nlc1xyXG4gICAgICBibG9ja1B1YmxpY0FjY2VzczogY2RrLmF3c19zMy5CbG9ja1B1YmxpY0FjY2Vzcy5CTE9DS19BTEwsXHJcbiAgICAgIGVuY3J5cHRpb246IGNkay5hd3NfczMuQnVja2V0RW5jcnlwdGlvbi5TM19NQU5BR0VELFxyXG4gICAgICB2ZXJzaW9uZWQ6IHRydWVcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENsb3VkV2F0Y2ggZGFzaGJvYXJkIGZvciBkZW1vXHJcbiAgICBjb25zdCBkYXNoYm9hcmQgPSBuZXcgY2RrLmF3c19jbG91ZHdhdGNoLkRhc2hib2FyZCh0aGlzLCAnRGVtb0Rhc2hib2FyZCcsIHtcclxuICAgICAgZGFzaGJvYXJkTmFtZTogJ0FJLUNvbXBsaWFuY2UtRGVtby1EYXNoYm9hcmQnXHJcbiAgICB9KTtcclxuXHJcbiAgICBkYXNoYm9hcmQuYWRkV2lkZ2V0cyhcclxuICAgICAgbmV3IGNkay5hd3NfY2xvdWR3YXRjaC5UZXh0V2lkZ2V0KHtcclxuICAgICAgICBtYXJrZG93bjogJyMgQUkgQ29tcGxpYW5jZSBTaGVwaGVyZCBEZW1vXFxuXFxuVGhpcyBpcyBhIGRlbW9uc3RyYXRpb24gb2YgdGhlIEFJIENvbXBsaWFuY2UgU2hlcGhlcmQgcGxhdGZvcm0gYXJjaGl0ZWN0dXJlLidcclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgLy8gR3JhbnQgcGVybWlzc2lvbnNcclxuICAgIGxhbWJkYS5hZGRUb1JvbGVQb2xpY3kobmV3IGNkay5hd3NfaWFtLlBvbGljeVN0YXRlbWVudCh7XHJcbiAgICAgIGFjdGlvbnM6IFsnZHluYW1vZGI6R2V0SXRlbScsICdkeW5hbW9kYjpQdXRJdGVtJywgJ2R5bmFtb2RiOlF1ZXJ5J10sXHJcbiAgICAgIHJlc291cmNlczogW2R5bmFtb1RhYmxlLnRhYmxlQXJuXVxyXG4gICAgfSkpO1xyXG5cclxuICAgIGxhbWJkYS5hZGRUb1JvbGVQb2xpY3kobmV3IGNkay5hd3NfaWFtLlBvbGljeVN0YXRlbWVudCh7XHJcbiAgICAgIGFjdGlvbnM6IFsnczM6R2V0T2JqZWN0JywgJ3MzOlB1dE9iamVjdCddLFxyXG4gICAgICByZXNvdXJjZXM6IFtgJHtzM0J1Y2tldC5idWNrZXRBcm59LypgXVxyXG4gICAgfSkpO1xyXG5cclxuICAgIC8vIE91dHB1dHNcclxuICAgIG5ldyBjZGsuQ2ZuT3V0cHV0KHRoaXMsICdBcGlVcmwnLCB7XHJcbiAgICAgIHZhbHVlOiBhcGkudXJsLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0RlbW8gQVBJIFVSTCdcclxuICAgIH0pO1xyXG5cclxuICAgIG5ldyBjZGsuQ2ZuT3V0cHV0KHRoaXMsICdMYW1iZGFBcm4nLCB7XHJcbiAgICAgIHZhbHVlOiBsYW1iZGEuZnVuY3Rpb25Bcm4sXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnRGVtbyBMYW1iZGEgRnVuY3Rpb24gQVJOJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgbmV3IGNkay5DZm5PdXRwdXQodGhpcywgJ0R5bmFtb1RhYmxlTmFtZScsIHtcclxuICAgICAgdmFsdWU6IGR5bmFtb1RhYmxlLnRhYmxlTmFtZSxcclxuICAgICAgZGVzY3JpcHRpb246ICdEZW1vIER5bmFtb0RCIFRhYmxlIE5hbWUnXHJcbiAgICB9KTtcclxuXHJcbiAgICBuZXcgY2RrLkNmbk91dHB1dCh0aGlzLCAnUzNCdWNrZXROYW1lJywge1xyXG4gICAgICB2YWx1ZTogczNCdWNrZXQuYnVja2V0TmFtZSxcclxuICAgICAgZGVzY3JpcHRpb246ICdEZW1vIFMzIEJ1Y2tldCBOYW1lJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gVGFnc1xyXG4gICAgY2RrLlRhZ3Mub2YodGhpcykuYWRkKCdQcm9qZWN0JywgJ0FJLUNvbXBsaWFuY2UtU2hlcGhlcmQnKTtcclxuICAgIGNkay5UYWdzLm9mKHRoaXMpLmFkZCgnRW52aXJvbm1lbnQnLCAnZGVtbycpO1xyXG4gICAgY2RrLlRhZ3Mub2YodGhpcykuYWRkKCdTdGFnZScsICdkZW1vJyk7XHJcbiAgICBjZGsuVGFncy5vZih0aGlzKS5hZGQoJ01hbmFnZWRCeScsICdDREsnKTtcclxuICAgIGNkay5UYWdzLm9mKHRoaXMpLmFkZCgnUHVycG9zZScsICdIYWNrYXRob24gRGVtbycpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gU2ltcGxlIGFwcCBmb3IgZGVtb1xyXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xyXG5cclxuY29uc3QgYWNjb3VudElkID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnYWNjb3VudElkJykgfHwgcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVDtcclxuY29uc3QgcmVnaW9uID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgncmVnaW9uJykgfHwgcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfUkVHSU9OIHx8ICd1cy1lYXN0LTEnO1xyXG5cclxubmV3IFNpbXBsZUFpQ29tcGxpYW5jZVN0YWNrKGFwcCwgJ0FJQ29tcGxpYW5jZURlbW9TdGFjaycsIHtcclxuICBlbnY6IHtcclxuICAgIGFjY291bnQ6IGFjY291bnRJZCxcclxuICAgIHJlZ2lvbjogcmVnaW9uXHJcbiAgfSxcclxuICBkZXNjcmlwdGlvbjogJ0FJIENvbXBsaWFuY2UgU2hlcGhlcmQgRGVtbyBTdGFjayBmb3IgSGFja2F0aG9uJ1xyXG59KTtcclxuXHJcbi8vIEFkZCB0YWdzIHRvIHRoZSBlbnRpcmUgYXBwXHJcbmNkay5UYWdzLm9mKGFwcCkuYWRkKCdQcm9qZWN0JywgJ0FJLUNvbXBsaWFuY2UtU2hlcGhlcmQnKTtcclxuY2RrLlRhZ3Mub2YoYXBwKS5hZGQoJ1B1cnBvc2UnLCAnSGFja2F0aG9uIERlbW8nKTtcclxuIl19